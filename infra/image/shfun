#!/bin/bash -eu
# This file is meant to be source'd by shell scripts

SCRIPTDIR="$(dirname -- "$(readlink -f "${BASH_SOURCE[0]}")")"

# shellcheck source=infra/image/shlog
. "${SCRIPTDIR}/shlog"

run_if_exists() {
    trap - ERR
    cmd="${1}"
    shift
    [ -n "$(command -v "${cmd}")" ] && "${cmd}" "${@}"
}

get_python_executable() {
    trap - ERR
    for py in "/usr/libexec/platform-python" "python3" "python2" "python"
    do
        python_cmd="$(command -v "${py}")"
        if [ -n "${python_cmd}" ]
        then
            echo "${python_cmd}"
            return 0
        fi
    done
    die "Could not find python executable."
}

start_virtual_environment() {
    trap - ERR
    # options -f
    local FORCE_ENV VENV envdirectory
    FORCE_ENV="N"
    while getopts ":f" option
    do
        case "$option" in
            f) FORCE_ENV="Y" ;;
            *) die "prepare_virtual_environment: Invalid option: ${option}" ;;
        esac
    done
    envdirectory="${test_env:-/tmp/ansible-freeipa-tests}"

    python="$(get_python_executable)"

    # Prepare virtual environment
    VENV=$(in_python_virtualenv && echo Y || echo N)

    if [ "${FORCE_ENV}" == "Y" ]
    then
        run_if_exists deactivate
        VENV="N"
        rm -rf "$test_env"
        log info "Virtual environment will be (re)created."
    fi

    if [ "$VENV" == "N" ]
    then
        log info "Preparing virtual environment: ${envdirectory}"
        if [ ! -d "${envdirectory}" ] || [ ! -f "${envdirectory}/bin/activate" ]
        then
            log info "Creating virtual environment: ${envdirectory}..."
	    log warn "RUN: ${python} -m venv ${envdirectory}"
	    "${python}" -m venv "${envdirectory}" || die "Cannot create virtual environment."
	fi
	log info "Starting virtual environment: ${envdirectory}"
	[ -f "${envdirectory}/bin/activate" ] || die "Failed to create virtual environment."
	# shellcheck disable=SC1091
	. "${envdirectory}/bin/activate" || die "Cannot activate virtual environment."
	export STOP_VIRTUALENV="Y"
        log info "Installing required tools."
        log none "Upgrading: pip setuptools wheel"
        pip install --quiet --upgrade pip setuptools wheel
    else
       log info "Using current virtual environment."
    fi
}

die() {
    usg="N"
    if [ "${1}" == "-u" ]
    then
       usg="Y"
       shift 1
    fi
    log error "${*}"
    export STOP_CONTAINER="N"
    [ "${usg}" == "Y" ] && run_if_exists usage
    exit 1
}

in_python_virtualenv() {
    local script
    read -r -d "" script <<EOS
import sys;
base = getattr(sys, "base_prefix", ) or getattr(sys, "real_prefix", ) or sys.prefix
print('yes' if sys.prefix != base else 'no')
EOS
    test "$(${python} -c "${script}")" == "yes"
}

