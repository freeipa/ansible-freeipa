# -*- coding: utf-8 -*-

# Authors:
#   $author <$email>
#
# Copyright (C) $year Red Hat
# see file 'COPYING' for use and warranty information
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import (absolute_import, division, print_function)

__metaclass__ = type

ANSIBLE_METADATA = {
    "metadata_version": "1.0",
    "supported_by": "community",
    "status": ["preview"],
}

DOCUMENTATION = """
---
module: ipa$name
short description: Manage FreeIPA $name
description: Manage FreeIPA $name
extends_documentation_fragment:
  - ipamodule_base_docs
options:
  name:
    description: The list of $name name strings.
    required: true
    aliases: ["API_PARAMETER_NAME"]
  PARAMETER1:
    description: DESCRIPTION
    required: REQUIRED
    aliases: ["API_PARAMETER_NAME"]
  PARAMETER2:
    description: DESCRIPTION
    required: REQUIRED
    aliases: ["API_PARAMETER_NAME"]
  state:
    description: The state to ensure.
    choices: ["present", "absent"]
    default: present
    required: true
"""

EXAMPLES = """
# Ensure $name NAME is present
- ipa$name:
    ipaadmin_password: SomeADMINpassword
    name: NAME
    PARAMETERS

# Ensure $name NAME is absent
- ipa$name:
    ipaadmin_password: SomeADMINpassword
    name: NAME
    state: absent

# Ensure $name NAME ...
- ipa$name:
    ipaadmin_password: SomeADMINpassword
    name: NAME
    CHANGE PARAMETERS
"""

RETURN = """
"""


from ansible.module_utils.ansible_freeipa_module import \
    IPAAnsibleModule, compare_args_ipa
from ansible.module_utils import six

if six.PY3:
    unicode = str


def find_$name(module, name):
    """Find if a $name with the given name already exist."""
    try:
        _result = module.ipa_command("$name_show", name, {"all": True})
    except Exception:  # pylint: disable=broad-except
        # An exception is raised if $name name is not found.
        return None
    else:
        return _result["result"]


def gen_args(PARAMETER1, PARAMETER2):
    _args = {}
    if PARAMETER1 is not None:
        _args["API_PARAMETER1_NAME"] = PARAMETER1
    if PARAMETER2 is not None:
        _args["API_PARAMETER2_NAME"] = PARAMETER2
    return _args


def main():
    ansible_module = IPAAnsibleModule(
        argument_spec=dict(
            # general
            name=dict(type="list", aliases=["API_PARAMETER_NAME"],
                      default=None, required=True),
            # present
            PARAMETER1=dict(required=False, type='str',
                            aliases=["API_PARAMETER_NAME"], default=None),
            PARAMETER2=dict(required=False, type='list',
                            aliases=["API_PARAMETER_NAME"], default=None),
            # state
            state=dict(type="str", default="present",
                       choices=["present", "absent"]),
        ),
        supports_check_mode=True,
    )

    ansible_module._ansible_debug = True

    # Get parameters

    # general
    names = ansible_module.params_get("name")

    # present
    PARAMETER1 = ansible_module.params_get("PARAMETER1")
    PARAMETER2 = ansible_module.params_get("PARAMETER2")

    # state
    state = ansible_module.params_get("state")

    # Check parameters

    invalid = []

    if state == "present":
        if len(names) != 1:
            ansible_module.fail_json(
                msg="Only one $name can be added at a time.")

    if state == "absent":
        if len(names) < 1:
            ansible_module.fail_json(msg="No name given.")
        invalid = ["PARAMETER1", "PARAMETER2"]

    ansible_module.params_fail_used_invalid(invalid, state)

    # Init

    changed = False
    exit_args = {}

    # Connect to IPA API
    with ansible_module.ipa_connect():

        commands = []
        for name in names:
            # Make sure $name exists
            res_find = find_$name(ansible_module, name)

            # Create command
            if state == "present":

                # Generate args
                args = gen_args(PARAMETER1, PARAMETER2)

                # Found the $name
                if res_find is not None:
                    # For all settings is args, check if there are
                    # different settings in the find result.
                    # If yes: modify
                    if not compare_args_ipa(ansible_module, args,
                                            res_find):
                        commands.append([name, "$name_mod", args])
                else:
                    commands.append([name, "$name_add", args])

            elif state == "absent":
                if res_find is not None:
                    commands.append([name, "$name_del", {}])

            else:
                ansible_module.fail_json(msg="Unkown state '%s'" % state)

        # Execute commands

        changed = ansible_module.execute_ipa_commands(commands)

    # Done

    ansible_module.exit_json(changed=changed, **exit_args)


if __name__ == "__main__":
    main()
